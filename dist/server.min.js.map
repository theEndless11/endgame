{"version":3,"sources":["server.js"],"names":["express","require","mongoose","cors","app","Ably","env","PORT","connect","port","log","useNewUrlParser","err","messageSchema","Schema","text","console","required","timestamp","type","Date","default","now","Message","model","use","json","ably","Realtime","key","publicChannel","channels","get","message","newMessage","regeneratorRuntime","async","_context","prev","next","data","awrap","save","stop","req","res","messages","_context2","find","sort","sent","t0","status","error","listen","concat"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,SAAWD,QAAQ,YADnBD,KAAOC,QAAU,QAGjBE,KAAOF,QAAQ,QAEfG,IAAMJ,UAHNK,KAAOJ,QAAQK,IAADC,MAApB,IAOAL,SAASM,QAAQ,kHAAmH,CAJ9HJ,iBAAN,EACMK,oBAAmBF,IAGzBL,KAAAA,WAAAA,OAASM,QAAQE,IAAA,uBAAjB,MACIC,SAAAA,GAAAA,OAAAA,QAAiBD,IAD+GE,KAI9H,IAJNC,cAKOD,IAAGV,SAAAY,OAAA,CAAAC,KAAIC,CAAAA,KAAQN,OAAZO,UAAA,GAGVC,UAAA,CAAAC,KAAAC,KAAAC,QAAAD,KAAAE,OAEQC,QAAErB,SAAAsB,MAAA,UAAAX,eAAAT,IADgCqB,IAAAzB,QAAA0B,QAEtCR,IAAAA,IAAAA,QAAW,IAAAS,KAAA,IAAAtB,KAAAuB,SAAA,CAAAC,IAAA,sBAFfC,cAAAH,KAAAI,SAAAC,IAAA,QAQA5B,cAAQJ,UAAR,UAAA,SAAAiC,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OACQpC,EAER,IAAAoB,QAAA,CAAAR,KAAAkB,EAAAO,KAAAzB,OAHAsB,EAAAE,KAAA,EAAAJ,mBAAAM,MAUUP,EAAWQ,QAVrB,KAAA,EAIMf,QAAOjB,IAAIL,uBAAc4B,EAAAO,KAAAzB,MAJ/B,KAAA,EAAA,IAAA,MAAA,OAAAsB,EAAAM,YAeAvC,IAAI4B,IAAI,YAAa,SAAOY,EAAKC,GAAZ,IAAAC,EAAA,OAAAX,mBAAAC,MAAA,SAAAW,GAAA,OAAA,OAAAA,EAAAT,KAAAS,EAAAR,MAAA,KAAA,EAAA,OAAAQ,EAAAT,KAAA,EAAAS,EAAAR,KAAA,EAAAJ,mBAAAM,MAPclB,QAAAyB,OAAAC,KAAA,CAAA/B,WAAA,KAOd,KAAA,EAPc4B,EAOdC,EAAAG,KAPcL,EAAAnB,KAAAoB,GAOdC,EAAAR,KAAA,GAAA,MAAA,KAAA,EAAAQ,EAAAT,KAAA,EAAAS,EAAAI,GAAAJ,EAAA,MAAA,GAPcF,EAAAO,OAAA,KAAA1B,KAAA,CAAA2B,MAAA,6BAOd,KAAA,GAAA,IAAA,MAAA,OAAAN,EAAAJ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAPcvC,IAAAqB,IAAAzB,QAAA,OAAA,WAmBnCI,IAAIkD,OAAO7C,KAAM,WAnBkBO,QAAAN,IAAA,0BAAA6C,OAAA9C","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst Ably = require('ably');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// MongoDB connection\r\nmongoose.connect('mongodb+srv://sneha321:sneha321@cluster0.nl9gh.mongodb.net/chatApp?retryWrites=true&w=majority&appName=Cluster0', {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n})\r\n.then(() => console.log('MongoDB connected'))\r\n.catch(err => console.log(err));\r\n\r\n\r\n// MongoDB Message Model\r\nconst messageSchema = new mongoose.Schema({\r\n    text: { type: String, required: true },\r\n    timestamp: { type: Date, default: Date.now }\r\n});\r\n\r\nconst Message = mongoose.model('Message', messageSchema);\r\n\r\n// Use middleware\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n// Initialize Ably\r\nconst ably = new Ably.Realtime({ key: 'YOUR_ABLY_API_KEY' });\r\nconst publicChannel = ably.channels.get('chat');\r\n\r\n// Listen for new messages on the public chat and save them to MongoDB\r\npublicChannel.subscribe('message', async (message) => {\r\n    const newMessage = new Message({ text: message.data.text });\r\n    await newMessage.save();\r\n    console.log('Message saved to DB:', message.data.text);\r\n});\r\n\r\n// API to get all messages from the MongoDB database\r\napp.get('/messages', async (req, res) => {\r\n    try {\r\n        const messages = await Message.find().sort({ timestamp: -1 });\r\n        res.json(messages);\r\n    } catch (err) {\r\n        res.status(500).json({ error: 'Failed to fetch messages' });\r\n    }\r\n});\r\n\r\n// Serve static files (HTML, JS, etc.) - if you have them in a public folder\r\napp.use(express.static('public'));\r\n\r\napp.listen(port, () => {\r\n    console.log(`Server running on port ${port}`);\r\n});\r\n"]}