{"version":3,"sources":["server.js"],"names":["express","require","mongoose","Ably","cors","app","port","process","env","PORT","connect","useNewUrlParser","useUnifiedTopology","then","console","log","err","messageSchema","Schema","text","type","String","required","timestamp","Date","now","Message","model","use","json","ably","Realtime","key","publicChannel","channels","get","subscribe","message","newMessage","data","save","req","res","find","sort","messages","status","error","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst Ably = require('ably');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// MongoDB connection\r\nmongoose.connect('mongodb+srv://sneha321:sneha321@cluster0.nl9gh.mongodb.net/chatApp?retryWrites=true&w=majority&appName=Cluster0', {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n})\r\n.then(() => console.log('MongoDB connected'))\r\n.catch(err => console.log(err));\r\n\r\n\r\n// MongoDB Message Model\r\nconst messageSchema = new mongoose.Schema({\r\n    text: { type: String, required: true },\r\n    timestamp: { type: Date, default: Date.now }\r\n});\r\n\r\nconst Message = mongoose.model('Message', messageSchema);\r\n\r\n// Use middleware\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n// Initialize Ably\r\nconst ably = new Ably.Realtime({ key: 'YOUR_ABLY_API_KEY' });\r\nconst publicChannel = ably.channels.get('chat');\r\n\r\n// Listen for new messages on the public chat and save them to MongoDB\r\npublicChannel.subscribe('message', async (message) => {\r\n    const newMessage = new Message({ text: message.data.text });\r\n    await newMessage.save();\r\n    console.log('Message saved to DB:', message.data.text);\r\n});\r\n\r\n// API to get all messages from the MongoDB database\r\napp.get('/messages', async (req, res) => {\r\n    try {\r\n        const messages = await Message.find().sort({ timestamp: -1 });\r\n        res.json(messages);\r\n    } catch (err) {\r\n        res.status(500).json({ error: 'Failed to fetch messages' });\r\n    }\r\n});\r\n\r\n// Serve static files (HTML, JS, etc.) - if you have them in a public folder\r\napp.use(express.static('public'));\r\n\r\napp.listen(port, () => {\r\n    console.log(`Server running on port ${port}`);\r\n});\r\n"],"file":"server.dev.js"}